//sort using merge sort Tc(nlogn+n(two pointer one pointing frst other pointing last))

import java.util.*;
public class Solution{
static void mergesort(int a[],int low,int high)
{
    if(low==high)
    return;
    else
    {
        int mid=(low+high)/2;
        mergesort(a,low,mid);
        mergesort(a,mid+1,high);
        merge(a,low,high);
    }
    
}
static void merge(int a[],int low,int high)
{int k=0;
    int temp[]=new int[high-low+1];
    int i=low;int mid=(low+high)/2;
    int j=mid+1;
    while((i<=mid)&&(j<=high))
    {if(a[i]<=a[j])
        temp[k++]=a[i++];
    else
    temp[k++]=a[j++];
    
    }
    while(i<=mid)
    temp[k++]=a[i++];
    while(j<=high)
    temp[k++]=a[j++];
    for(int u=low;u<=high;u++)
    a[u]=temp[u-low];
}

     public static void main(String []args){
    Scanner s=new Scanner(System.in);
    int w=s.nextInt();
    for(int p=0;p<w;p++){
    int n=s.nextInt();
    int k=s.nextInt();
    int a[]=new int[n];
    for(int i=0;i<n;i++)
    a[i]=s.nextInt();
    mergesort(a,0,n-1);
    int i=0;int j=n-1;int e=0;int t;int count=0;
        if(n==1)
            System.out.println("True");
        else{
    for(int q=0;q<n;q++)
    {
        if(i<j){
        t=(a[j]+a[i]);
        if(k==t)
        {e=1;
            System.out.println("True");
         break;
        }
        else if(k<t)
        j--;
        else
        i++;}
    }
    if(e==0)
    System.out.println("False");}
    }
     }
}