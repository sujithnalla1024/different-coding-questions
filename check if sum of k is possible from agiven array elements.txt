//Here we are simply taking a boolean matrix of size n*k+1 where k is required checking sum
dp(i,j)-tells whether sum of j is possible from first i elements including i th element
//so dp(i,j) depends on two things 
//Case 1:1.Including i'th element and excluding i'th element if we include ith element we need to get sum of j-a[i] from i-1 elements as ith element is included
//so incudeing ith element case:--------->dp(i,j)=dp(i-1,j-a[i])
//Case 2:Excluding ith element: means we need to form sum of j using i-1 elements as ith element is excluded
// So -------->dp(i,j)=dp(i-1,j)
//So in either of above ways we may get sum=k so boolean or is kept so-- DPSTATE---dp(i,j)=dp(i,j-a[i])||dp(i-1,j).if(j<[i]) u cant include cuurent element  So for(j<a[i])--->dp(i,j)=dp(i-1,j)  
//Rows denote a[i] elements to be incuded to form sum k(which are columns)
//here we take 0 to =k elements as columns and all array elements in row.
//Ans will be at last element that is dp[n-1][k] as it tells whether sum of k is possible with frst n-1 array elements or not
//Similarly to count no of ways replace || with + and false with 0 true with 1 and dp[n-1][k] gives noof ways sum k is possible with frst n-1 array elements. 
import java.io.*;
import java.util.*;
public class Main{
    static boolean isSubsetSum(int a[],int n, int k) 
    {
        boolean dp[][]=new boolean[n][k+1];
        dp[0][0]=true;
        for(int q=1;q<=k;q++)
        {
            if(q==a[0])
                dp[0][q]=true;
            else
                dp[0][q]=false;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<k+1;j++){
                      if(j>=a[i])
                dp[i][j]=((dp[i-1][j])||(dp[i-1][j-a[i]]));
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n-1][k];
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner s=new Scanner(System.in);
        int n=s.nextInt();
        for(int i=0;i<n;i++)
        {
            int m=s.nextInt();
            int k=s.nextInt();
            int a[]=new int[m];
            for(int j=0;j<m;j++)
                a[j]=s.nextInt();
            System.out.println(isSubsetSum(a,m,k) ? "YES":"NO");
        }}
         
    
}