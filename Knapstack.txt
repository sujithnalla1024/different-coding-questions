// this is 0/1 knapstack DP state--->dp(i,j) denotes maximum prfit that can be earneed to fill knapsack of size j from frst i items
// for every element there are two posiibilites take it or leave it if we take it
//Case 1: we have to fill the knapsack of size j-w[i] with i-1 items 
//Case 2: we have to fill the knapsack of size j with i-1 items 
as we need to get maximum profit so dp(i,j)=Math.max(  (dp(i-1,j-w[i])+v[i])  ,dp(i-1,j) )//v[i] because we are including the current item to knapsack its value must be added.
//in infinite knapsack we need to fill the knapsack of size i,j so after including current item we can again use ith item so we should fill with (i,j-w[i])
//So max profit by filling knapsack =dp(i,j)=Math.max(  (dp(i,j-w[i])+v[i]),dp(i-1,j))

import java.io.*;
import java.util.*;
public class Solution {
   static int knapSack(int k, int wt[], int val[], int n) 
    {
     int dp[][]=new int[n+1][k+1];
     for(int q=0;q<=k;q++)
       dp[0][q]=0;
     for(int i=1;i<=n;i++){
       for(int j=0;j<=k;j++){
         if(j>=wt[i-1])
           dp[i][j]=Math.max((dp[i-1][j-wt[i-1]]+val[i-1]),dp[i-1][j]);
         else 
           dp[i][j]=dp[i-1][j];
       }
     }
        
         
  
        return dp[n][k]; 
    } 

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
      Scanner s=new Scanner(System.in);
      int t=s.nextInt();
      StringBuilder sb=new StringBuilder();
      while(t-->0){
        int size=s.nextInt();
        int n=s.nextInt();
        int a[]=new int[n];
        int b[]=new int[n];
        for(int i=0;i<n;i++){
          a[i]=s.nextInt();
          b[i]=s.nextInt();
        }
        sb.append(knapSack(size,a,b,n)+"\n");
      }
      System.out.println(sb.toString());
    }
}