import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
//logic is simply keep on adding elements in to a treemap or any array if adding element's ceil in the array exists just replace its ceil in array and dont increment the answer if there is no ceiling value in array then add it in to it and just increment the ans
public class Solution {

    // Complete the longestIncreasingSubsequence function below.
static boolean meth(TreeMap<Integer,Integer> tp,int k){
  if(tp.ceilingKey(k)!=null)
  {
    tp.remove(tp.ceilingKey(k));
    tp.put(k,1);
    return false;
  }
  else{
         tp.put(k,1);
  }
  
         return true;
}
    static int longestIncreasingSubsequence(int[] arr) {
int ans=0;
TreeMap<Integer,Integer> tp=new TreeMap<>();
for(int i=0;i<arr.length;i++){
  if(meth(tp,arr[i]))
  ans++;
  
}
return ans;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            int arrItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            arr[i] = arrItem;
        }

        int result = longestIncreasingSubsequence(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
